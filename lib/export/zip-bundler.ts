// ZIP Bundler for Export System

import JSZip from 'jszip'
import { 
  ExportedFile, 
  ExportStructure, 
  ExportMetadata,
  ClaudeModule,
  TemplateVariables 
} from './types'
import { ClaudeOpsGenerator } from './claudeops-generator'
import { PromptGenerator } from './prompt-generator'
import {
  SETUP_GUIDE_TEMPLATE,
  ARCHITECTURE_DOC_TEMPLATE,
  processTemplate
} from './templates'

export class ZipBundler {
  private zip: JSZip
  private metadata: ExportMetadata

  constructor(metadata: ExportMetadata) {
    this.zip = new JSZip()
    this.metadata = metadata
  }

  // Main bundling method
  async bundle(exportStructure: ExportStructure): Promise<Buffer> {
    // Add all files to ZIP
    for (const file of exportStructure.files) {
      this.addFile(file)
    }

    // Add metadata file
    this.addMetadata()

    // Generate ZIP with optimal compression
    const buffer = await this.zip.generateAsync({
      type: 'nodebuffer',
      compression: 'DEFLATE',
      compressionOptions: {
        level: 9 // Maximum compression
      },
      comment: `Generated by SaaS Blueprint Generator v${this.metadata.version}`
    })

    return buffer
  }

  // Create complete export from session data
  static async createExportFromSession(
    sessionData: any,
    modules: ClaudeModule[],
    answers: Record<number, any>
  ): Promise<Buffer> {
    const variables: TemplateVariables = {
      businessName: sessionData.name,
      businessIdea: sessionData.business_idea,
      targetAudience: sessionData.target_audience,
      techStack: ['Next.js', 'TypeScript', 'Supabase', 'Tailwind CSS'],
      modules,
      prompts: [],
      features: extractFeatures(modules),
      constraints: extractConstraints(modules),
      timestamp: new Date().toISOString(),
      version: '1.0.0'
    }

    // Initialize generators
    const claudeOpsGen = new ClaudeOpsGenerator(variables)
    const promptGen = new PromptGenerator(modules, sessionData.business_idea, sessionData.name)
    
    // Generate all files
    const files: ExportedFile[] = []

    // Core documentation
    files.push(claudeOpsGen.generateClaudeMd())
    files.push(claudeOpsGen.generateReadme())

    // Module documentation
    files.push(...claudeOpsGen.generateModuleReadmes())
    files.push(...claudeOpsGen.generateClaudeOpsModules())

    // Prompts
    files.push(...promptGen.generateAllPrompts())

    // Additional documentation
    files.push(...ZipBundler.generateAdditionalDocs(variables))

    // Configuration files
    files.push(...ZipBundler.generateConfigFiles(variables))

    // Source code templates
    files.push(...ZipBundler.generateSourceTemplates(modules))

    // Create export structure
    const exportStructure: ExportStructure = {
      id: sessionData.id,
      sessionId: sessionData.id,
      files,
      metadata: {
        version: variables.version,
        generatedBy: 'SaaS Blueprint Generator',
        businessName: variables.businessName,
        targetAudience: variables.targetAudience,
        modules: modules.map(m => m.name),
        totalSize: files.reduce((sum, f) => sum + f.size, 0),
        fileCount: files.length,
        mcpServers: extractMcpServers(modules)
      },
      createdAt: new Date()
    }

    // Create bundler and generate ZIP
    const bundler = new ZipBundler(exportStructure.metadata)
    return bundler.bundle(exportStructure)
  }

  // Add file to ZIP
  private addFile(file: ExportedFile): void {
    // Organize files in proper folder structure
    const folder = this.getFolderForFile(file.path)
    
    if (folder) {
      const zipFolder = this.zip.folder(folder)
      if (zipFolder) {
        const filename = file.path.split('/').pop() || 'unknown'
        zipFolder.file(filename, file.content)
      }
    } else {
      this.zip.file(file.path, file.content)
    }
  }

  // Add metadata JSON
  private addMetadata(): void {
    const metadataContent = JSON.stringify(this.metadata, null, 2)
    this.zip.file('metadata.json', metadataContent)
  }

  // Determine folder structure
  private getFolderForFile(path: string): string | null {
    const parts = path.split('/')
    if (parts.length > 1) {
      parts.pop() // Remove filename
      return parts.join('/')
    }
    return null
  }

  // Generate additional documentation
  private static generateAdditionalDocs(variables: TemplateVariables): ExportedFile[] {
    const files: ExportedFile[] = []

    // Setup Guide
    const setupGuideVars = {
      businessName: variables.businessName,
      prerequisites: [
        { name: 'Node.js', version: '18+' },
        { name: 'npm', version: '9+' },
        { name: 'Git', version: '2.30+' }
      ],
      accounts: [
        { service: 'Supabase', purpose: 'Database and authentication' },
        { service: 'Stripe', purpose: 'Payment processing (optional)' },
        { service: 'OpenAI', purpose: 'AI features' },
        { service: 'Anthropic', purpose: 'Claude integration' }
      ],
      setupSteps: generateSetupSteps(variables),
      envTemplate: generateEnvTemplate(),
      verificationSteps: generateVerificationSteps(),
      troubleshooting: generateTroubleshootingGuide()
    }

    const setupContent = processTemplate(SETUP_GUIDE_TEMPLATE, setupGuideVars)
    files.push({
      path: 'docs/SETUP.md',
      content: setupContent,
      type: 'markdown',
      size: setupContent.length
    })

    // Architecture Documentation
    const archVars = {
      businessName: variables.businessName,
      designGoals: [
        'Scalability for growing user base',
        'Security-first approach',
        'Developer-friendly codebase',
        'Cost-effective infrastructure'
      ],
      architectureDiagram: generateArchitectureDiagram(),
      components: generateComponentList(variables.modules),
      userFlowDiagram: generateUserFlowDiagram(),
      dataPipelineDiagram: generateDataPipelineDiagram(),
      erDiagram: generateERDiagram(),
      tables: generateTableList(),
      apiGroups: generateApiGroups(variables.modules),
      authFlow: generateAuthFlow(),
      authzModel: generateAuthzModel(),
      dataProtection: generateDataProtectionList(),
      scalability: generateScalabilityConsiderations(),
      techDecisions: generateTechDecisions(),
      infrastructureDiagram: generateInfrastructureDiagram(),
      cicdPipeline: generateCICDPipeline(),
      monitoring: generateMonitoringList(),
      backupStrategy: generateBackupStrategy(),
      recoveryProcedures: generateRecoveryProcedures()
    }

    const archContent = processTemplate(ARCHITECTURE_DOC_TEMPLATE, archVars)
    files.push({
      path: 'docs/ARCHITECTURE.md',
      content: archContent,
      type: 'markdown',
      size: archContent.length
    })

    // Deployment Guide
    files.push({
      path: 'docs/DEPLOYMENT.md',
      content: generateDeploymentGuide(variables),
      type: 'markdown',
      size: 0
    })

    // Contributing Guide
    files.push({
      path: 'CONTRIBUTING.md',
      content: generateContributingGuide(variables),
      type: 'markdown',
      size: 0
    })

    return files.map(f => ({ ...f, size: f.content.length }))
  }

  // Generate configuration files
  private static generateConfigFiles(variables: TemplateVariables): ExportedFile[] {
    const files: ExportedFile[] = []

    // package.json
    files.push({
      path: 'package.json',
      content: generatePackageJson(variables),
      type: 'json',
      size: 0
    })

    // tsconfig.json
    files.push({
      path: 'tsconfig.json',
      content: generateTsConfig(),
      type: 'json',
      size: 0
    })

    // tailwind.config.js
    files.push({
      path: 'tailwind.config.js',
      content: generateTailwindConfig(),
      type: 'typescript',
      size: 0
    })

    // next.config.js
    files.push({
      path: 'next.config.js',
      content: generateNextConfig(),
      type: 'typescript',
      size: 0
    })

    // .env.example
    files.push({
      path: '.env.example',
      content: generateEnvExample(),
      type: 'markdown',
      size: 0
    })

    // .gitignore
    files.push({
      path: '.gitignore',
      content: generateGitignore(),
      type: 'markdown',
      size: 0
    })

    // vercel.json
    files.push({
      path: 'vercel.json',
      content: generateVercelJson(),
      type: 'json',
      size: 0
    })

    // docker-compose.yml (for local development)
    files.push({
      path: 'docker-compose.yml',
      content: generateDockerCompose(),
      type: 'yaml',
      size: 0
    })

    return files.map(f => ({ ...f, size: f.content.length }))
  }

  // Generate source code templates
  private static generateSourceTemplates(modules: ClaudeModule[]): ExportedFile[] {
    const files: ExportedFile[] = []

    // Main layout
    files.push({
      path: 'app/layout.tsx',
      content: generateRootLayout(),
      type: 'typescript',
      size: 0
    })

    // Homepage
    files.push({
      path: 'app/page.tsx',
      content: generateHomePage(),
      type: 'typescript',
      size: 0
    })

    // Global styles
    files.push({
      path: 'app/globals.css',
      content: generateGlobalStyles(),
      type: 'markdown',
      size: 0
    })

    // Module-specific templates
    modules.forEach(module => {
      // Module index file
      files.push({
        path: `lib/${module.name}/index.ts`,
        content: generateModuleIndex(module),
        type: 'typescript',
        size: 0
      })

      // Module types
      files.push({
        path: `lib/${module.name}/types.ts`,
        content: generateModuleTypes(module),
        type: 'typescript',
        size: 0
      })

      // Module constants
      files.push({
        path: `lib/${module.name}/constants.ts`,
        content: generateModuleConstants(module),
        type: 'typescript',
        size: 0
      })
    })

    // Middleware
    files.push({
      path: 'middleware.ts',
      content: generateMiddleware(),
      type: 'typescript',
      size: 0
    })

    return files.map(f => ({ ...f, size: f.content.length }))
  }
}

// Helper functions
function extractFeatures(modules: ClaudeModule[]): string[] {
  const features: string[] = []
  modules.forEach(module => {
    features.push(...module.features)
  })
  return [...new Set(features)] // Remove duplicates
}

function extractConstraints(modules: ClaudeModule[]): string[] {
  const constraints: string[] = []
  modules.forEach(module => {
    constraints.push(...module.constraints)
  })
  return [...new Set(constraints)]
}

function extractMcpServers(modules: ClaudeModule[]): string[] {
  const servers: string[] = []
  modules.forEach(module => {
    servers.push(...module.mcpServers)
  })
  return [...new Set(servers)]
}

// Template generation functions
function generateSetupSteps(variables: TemplateVariables): any[] {
  return [
    {
      number: 1,
      title: 'Clone Repository',
      description: 'Get the codebase on your local machine',
      commands: ['git clone <repository-url>', 'cd ' + variables.businessName.toLowerCase().replace(/\s+/g, '-')],
      notes: ['Make sure you have Git installed']
    },
    {
      number: 2,
      title: 'Install Dependencies',
      description: 'Install all required packages',
      commands: ['npm install'],
      notes: ['This may take a few minutes']
    },
    {
      number: 3,
      title: 'Configure Environment',
      description: 'Set up your environment variables',
      commands: ['cp .env.example .env.local', 'nano .env.local'],
      notes: ['Add your API keys and configuration']
    },
    {
      number: 4,
      title: 'Initialize Database',
      description: 'Set up Supabase and run migrations',
      commands: ['npx supabase init', 'npx supabase migration up'],
      notes: ['Ensure Supabase CLI is installed']
    },
    {
      number: 5,
      title: 'Start Development Server',
      description: 'Run the application locally',
      commands: ['npm run dev'],
      notes: ['Application will be available at http://localhost:3000']
    }
  ]
}

function generateEnvTemplate(): string {
  return `# Supabase
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key

# AI Services
OPENAI_API_KEY=sk-...
ANTHROPIC_API_KEY=sk-ant-...

# Stripe (Optional)
STRIPE_SECRET_KEY=sk_test_...
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_...
STRIPE_WEBHOOK_SECRET=whsec_...

# Application
NEXT_PUBLIC_APP_URL=http://localhost:3000
NODE_ENV=development`
}

function generateVerificationSteps(): any[] {
  return [
    { command: 'npm run type-check', expectedOutput: 'No type errors found' },
    { command: 'npm run lint', expectedOutput: 'No linting errors' },
    { command: 'npm test', expectedOutput: 'All tests pass' }
  ]
}

function generateTroubleshootingGuide(): any[] {
  return [
    { problem: 'npm install fails', solution: 'Clear npm cache: npm cache clean --force' },
    { problem: 'Supabase connection error', solution: 'Check your SUPABASE_URL and keys in .env.local' },
    { problem: 'Build errors', solution: 'Delete .next folder and node_modules, then reinstall' }
  ]
}

// Additional generator functions (simplified versions)
function generateArchitectureDiagram(): string {
  return `
┌─────────────┐     ┌─────────────┐     ┌─────────────┐
│   Browser   │────▶│   Next.js   │────▶│  Supabase   │
└─────────────┘     └─────────────┘     └─────────────┘
                           │                     │
                           ▼                     ▼
                    ┌─────────────┐     ┌─────────────┐
                    │     API     │     │  Database   │
                    └─────────────┘     └─────────────┘`
}

function generateComponentList(modules: ClaudeModule[]): any[] {
  return modules.map(m => ({
    name: m.title,
    purpose: m.description,
    technology: 'TypeScript/React',
    responsibilities: m.features
  }))
}

function generateUserFlowDiagram(): string {
  return 'User → Login → Dashboard → Features → Export'
}

function generateDataPipelineDiagram(): string {
  return 'Input → Validation → Processing → Storage → Response'
}

function generateERDiagram(): string {
  return 'Users ← → Sessions ← → Answers → Outputs'
}

function generateTableList(): any[] {
  return [
    { name: 'users', purpose: 'User authentication and profile' },
    { name: 'sessions', purpose: 'Workflow session tracking' },
    { name: 'answers', purpose: 'Phase answer storage' }
  ]
}

function generateApiGroups(modules: ClaudeModule[]): any[] {
  return modules.map(m => ({
    group: m.name,
    endpoints: [
      { method: 'GET', path: `/api/${m.name}`, description: `List ${m.name} items` },
      { method: 'POST', path: `/api/${m.name}`, description: `Create ${m.name} item` }
    ]
  }))
}

function generateAuthFlow(): string {
  return 'Email/Password → JWT → Session → Refresh Token'
}

function generateAuthzModel(): string {
  return 'Role-Based Access Control (RBAC) with Row Level Security'
}

function generateDataProtectionList(): string[] {
  return [
    'Encryption at rest',
    'Encryption in transit',
    'PII data masking',
    'Audit logging'
  ]
}

function generateScalabilityConsiderations(): any[] {
  return [
    { area: 'Database', strategy: 'Connection pooling and read replicas' },
    { area: 'Caching', strategy: 'Redis for session and API response caching' },
    { area: 'CDN', strategy: 'Static assets served via CDN' }
  ]
}

function generateTechDecisions(): any[] {
  return [
    {
      decision: 'Framework',
      choice: 'Next.js 14',
      rationale: 'Full-stack capabilities with excellent DX',
      tradeoffs: 'Learning curve for App Router'
    }
  ]
}

function generateInfrastructureDiagram(): string {
  return 'Vercel (Frontend) ← → Supabase (Backend) ← → Stripe (Payments)'
}

function generateCICDPipeline(): string {
  return 'Git Push → GitHub Actions → Tests → Vercel Deploy'
}

function generateMonitoringList(): any[] {
  return [
    { metric: 'Errors', tool: 'Sentry' },
    { metric: 'Performance', tool: 'Vercel Analytics' },
    { metric: 'Uptime', tool: 'Pingdom' }
  ]
}

function generateBackupStrategy(): string {
  return 'Daily automated backups with 30-day retention'
}

function generateRecoveryProcedures(): string {
  return 'Point-in-time recovery available via Supabase dashboard'
}

// Configuration file generators
function generatePackageJson(variables: TemplateVariables): string {
  const packageName = variables.businessName.toLowerCase().replace(/\s+/g, '-')
  return JSON.stringify({
    name: packageName,
    version: '0.1.0',
    private: true,
    scripts: {
      dev: 'next dev',
      build: 'next build',
      start: 'next start',
      lint: 'next lint',
      'type-check': 'tsc --noEmit',
      test: 'jest',
      'test:e2e': 'playwright test'
    },
    dependencies: {
      'next': '^14.2.0',
      'react': '^18.3.0',
      'react-dom': '^18.3.0',
      '@supabase/supabase-js': '^2.45.0',
      '@supabase/ssr': '^0.5.0',
      'tailwindcss': '^3.4.0',
      'typescript': '^5.5.0'
    },
    devDependencies: {
      '@types/node': '^20.14.0',
      '@types/react': '^18.3.0',
      'eslint': '^8.57.0',
      'jest': '^29.7.0',
      '@playwright/test': '^1.40.0'
    }
  }, null, 2)
}

function generateTsConfig(): string {
  return JSON.stringify({
    compilerOptions: {
      target: 'es5',
      lib: ['dom', 'dom.iterable', 'esnext'],
      allowJs: true,
      skipLibCheck: true,
      strict: true,
      noEmit: true,
      esModuleInterop: true,
      module: 'esnext',
      moduleResolution: 'bundler',
      resolveJsonModule: true,
      isolatedModules: true,
      jsx: 'preserve',
      incremental: true,
      plugins: [{ name: 'next' }],
      paths: {
        '@/*': ['./*']
      }
    },
    include: ['next-env.d.ts', '**/*.ts', '**/*.tsx'],
    exclude: ['node_modules']
  }, null, 2)
}

function generateTailwindConfig(): string {
  return `/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './app/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}'
  ],
  theme: {
    extend: {
      colors: {
        primary: 'var(--primary)',
        secondary: 'var(--secondary)'
      }
    }
  },
  plugins: []
}`
}

function generateNextConfig(): string {
  return `/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  images: {
    domains: ['localhost', 'your-domain.com']
  }
}

module.exports = nextConfig`
}

function generateEnvExample(): string {
  return generateEnvTemplate()
}

function generateGitignore(): string {
  return `# Dependencies
node_modules/
.pnp
.pnp.js

# Production
build/
dist/
.next/
out/

# Environment
.env.local
.env.*.local

# Debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Testing
coverage/
.nyc_output

# IDE
.vscode/
.idea/
*.swp
*.swo
.DS_Store

# Misc
*.log
tmp/
temp/`
}

function generateVercelJson(): string {
  return JSON.stringify({
    buildCommand: 'npm run build',
    devCommand: 'npm run dev',
    installCommand: 'npm install',
    framework: 'nextjs',
    outputDirectory: '.next'
  }, null, 2)
}

function generateDockerCompose(): string {
  return `version: '3.8'

services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next`
}

function generateDeploymentGuide(variables: TemplateVariables): string {
  return `# Deployment Guide

## Prerequisites
- Vercel account
- Supabase project
- Domain name (optional)

## Steps
1. Connect GitHub repository to Vercel
2. Configure environment variables
3. Deploy

## Post-Deployment
- Verify all features work
- Set up monitoring
- Configure backups`
}

function generateContributingGuide(variables: TemplateVariables): string {
  return `# Contributing to ${variables.businessName}

## Development Process
1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Write tests
5. Submit a pull request

## Code Style
- Follow TypeScript best practices
- Use Prettier for formatting
- Write meaningful commit messages

## Testing
All PRs must include tests and maintain >80% coverage.`
}

// Source template generators
function generateRootLayout(): string {
  return `import { Inter } from 'next/font/google'
import './globals.css'

const inter = Inter({ subsets: ['latin'] })

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}`
}

function generateHomePage(): string {
  return `export default function HomePage() {
  return (
    <main className="min-h-screen p-8">
      <h1 className="text-4xl font-bold">Welcome</h1>
      <p className="mt-4">Your SaaS application starts here.</p>
    </main>
  )
}`
}

function generateGlobalStyles(): string {
  return `@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --primary: #0070f3;
  --secondary: #ff0080;
}

body {
  @apply bg-white text-gray-900;
}`
}

function generateModuleIndex(module: ClaudeModule): string {
  return `// ${module.title} Module

export * from './types'
export * from './constants'

// Module initialization
export function initialize${module.name}() {
  console.log('Initializing ${module.name} module')
}`
}

function generateModuleTypes(module: ClaudeModule): string {
  return `// Type definitions for ${module.title}

export interface ${module.name}Config {
  // Add configuration options
}

export interface ${module.name}State {
  // Add state properties
}`
}

function generateModuleConstants(module: ClaudeModule): string {
  return `// Constants for ${module.title}

export const ${module.name.toUpperCase()}_CONFIG = {
  // Add configuration constants
}

export const ${module.name.toUpperCase()}_DEFAULTS = {
  // Add default values
}`
}

function generateMiddleware(): string {
  return `import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  // Add authentication check
  return NextResponse.next()
}

export const config = {
  matcher: ['/dashboard/:path*', '/api/:path*']
}`
}